# VNET/jail utility functions.  These assume that the consumer is using the
# ATF framework.

_list_interface()
{
	echo $1 >> created_interfaces.lst
}

_unlist_interface()
{
	sed -i "" /^$1\$/d created_interfaces.lst
}

_make_interface()
{
	local ifname tmp type

	type=$1
	tmp=$(mktemp vnet.XXXXXX)
	# atf_check prints an advisory message to standard output, which breaks
	# callers, so redirect it to standard error instead.  This makes test
	# reports confusing since other atf_check calls will print to standard
	# output, but I think it's the best we can do.
	atf_check -o save:${tmp} ifconfig $type create >&2
	ifname=$(cat ${tmp})
	_list_interface $ifname
	echo $ifname
}

vnet_init()
{
	if [ "`sysctl -i -n kern.features.vimage`" != 1 ]; then
		atf_skip "This test requires VIMAGE"
	fi
}

vnet_mkepair()
{
	local ifname

	ifname=$(_make_interface epair)
	_list_interface ${ifname%a}b
	echo ${ifname%a}
}

vnet_init_bridge()
{
	if ! kldstat -q -m if_bridge; then
		atf_skip "This test requires if_bridge"
	fi
}

vnet_mkbridge()
{
	_make_interface bridge
}

vnet_mkvlan()
{
	_make_interface vlan
}

vnet_mkloopback()
{
	_make_interface lo
}

vnet_mkjail()
{
	local ifname jailname vnet_interfaces

	jailname=$1
	shift

	vnet_interfaces=
	for ifname in $@
	do
		vnet_interfaces="${vnet_interfaces} vnet.interface=${ifname}"
		_unlist_interface $ifname
	done
	echo "jailname $jailname vnet_interfaces $vnet_interfaces" >&2
	atf_check jail -c name=${jailname} persist vnet ${vnet_interfaces}

	echo $jailname $@ >> created_jails.lst
}

vnet_ifmove()
{
	local ifname jailname

	ifname=$1
	jailname=$2

	atf_check ifconfig ${ifname} vnet ${jailname}
	_unlist_interface $ifname
	sed -i "" "/^${jailname}/s/\$/ ${ifname}/" created_jails.lst
}

vnet_ifrename_jail()
{
	jailname=$1
	ifname=$2
	ifnewname=$3

	atf_check -o match:$ifnewname ifconfig -j ${jailname} $ifname name $ifnewname
	sed -i "" "/^${jailname}/s/${ifname}/${ifnewname}/" created_jails.lst
}

vnet_cleanup()
{
	local ifname ifnames jailname

	if [ -f created_jails.lst ]; then
		while read jailname ifnames; do
			for ifname in ${ifnames}; do
				ifconfig -j ${jailname} ${ifname} destroy
			done
			jail -r ${jailname}
		done < created_jails.lst
		rm created_jails.lst
	fi

	if [ -f created_interfaces.lst ]; then
		while read ifname; do
			ifconfig ${ifname} destroy
		done < created_interfaces.lst
		rm created_interfaces.lst
	fi
}
