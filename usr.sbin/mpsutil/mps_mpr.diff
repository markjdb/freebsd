--- //depot/projects/lsimultiq/head/usr.sbin/mpsutil/mps_cmd.c	2015-02-16 06:22:37.000000000 -0700
+++ /home/scottl/p4/projects/lsimultiq/head/usr.sbin/mpsutil/mps_cmd.c	2015-02-16 06:22:37.000000000 -0700
@@ -37,7 +37,7 @@
 #if 0
 #include <sys/mps_ioctl.h>
 #else
-#include "mps_ioctl.h"
+#include "mpr_ioctl.h"
 #endif
 #include <sys/sysctl.h>
 #include <sys/uio.h>
@@ -237,7 +237,7 @@
 mps_map_btdh(int fd, uint16_t *devhandle, uint16_t *bus, uint16_t *target)
 {
 	int error;
-	struct mps_btdh_mapping map;
+	struct mpr_btdh_mapping map;
 
 	bzero(&map, sizeof(map));
 	map.Bus = *bus;
@@ -629,9 +629,9 @@
 mps_user_command(int fd, void *req, uint32_t req_len, void *reply,
         uint32_t reply_len, void *buffer, int len, uint32_t flags)
 {
-	struct mps_usr_command cmd;
+	struct mpr_usr_command cmd;
 
-	bzero(&cmd, sizeof(struct mps_usr_command));
+	bzero(&cmd, sizeof(struct mpr_usr_command));
 	cmd.req = req;
 	cmd.req_len = req_len;
 	cmd.rpl = reply;
@@ -640,7 +640,7 @@
 	cmd.len = len;
 	cmd.flags = flags;
 
-	if (ioctl(fd, MPSIO_MPS_COMMAND, &cmd) < 0)
+	if (ioctl(fd, MPRIO_MPR_COMMAND, &cmd) < 0)
 		return (errno);
 	return (0);
 }
@@ -650,7 +650,7 @@
 	uint32_t reply_len, void *data_in, uint32_t datain_len, void *data_out,
 	uint32_t dataout_len, uint32_t timeout)
 {
-	struct mps_pass_thru pass;
+	struct mpr_pass_thru pass;
 
 	pass.PtrRequest = (uint64_t)(uintptr_t)req;
 	pass.PtrReply = (uint64_t)(uintptr_t)reply;
@@ -661,13 +661,13 @@
 	pass.DataSize = datain_len;
 	pass.DataOutSize = dataout_len;
 	if (datain_len && dataout_len)
-		pass.DataDirection = MPS_PASS_THRU_DIRECTION_BOTH;
+		pass.DataDirection = MPR_PASS_THRU_DIRECTION_BOTH;
 	else if (datain_len)
-		pass.DataDirection = MPS_PASS_THRU_DIRECTION_READ;
+		pass.DataDirection = MPR_PASS_THRU_DIRECTION_READ;
 	else if (dataout_len)
-		pass.DataDirection = MPS_PASS_THRU_DIRECTION_WRITE;
+		pass.DataDirection = MPR_PASS_THRU_DIRECTION_WRITE;
 	else
-		pass.DataDirection = MPS_PASS_THRU_DIRECTION_NONE;
+		pass.DataDirection = MPR_PASS_THRU_DIRECTION_NONE;
 	pass.Timeout = timeout;
 
 	if (ioctl(fd, MPTIOCTL_PASS_THRU, &pass) < 0)
